# -*- coding: utf-8 -*-
"""Submission_Time_Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/161qG_oRI3VPMQDvoq0LZDxd996G-iEz2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

"""dataset dari https://www.kaggle.com/datasets/shaneysze/new-york-city-daily-temperature-18692021"""

df = pd.read_csv('nyc_temp_1869_2021.csv')
df.head()

df = df.drop(columns=["TMIN", 'Unnamed: 0'], axis=1)

df

df.shape

df.isnull().sum()

dates = df['MM/DD/YYYY'].values
temp  = df['TMAX'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Temperature max',
          fontsize=20);

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

from sklearn.model_selection import train_test_split
temp_latih, temp_test, date_latih, date_test = train_test_split(temp, dates, test_size=0.2, shuffle=False)

data_latih = windowed_dataset(temp_latih, window_size=60, batch_size=100, shuffle_buffer=1000)
data_test = windowed_dataset(temp_test, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

threshold_mae = (df['TMAX'].max() - df['TMAX'].min()) * 10/100
threshold_mae

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< threshold_mae):
      self.model.stop_training = True
      print("\nMAE < 10%")
callbacks = myCallback()

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(data_latih ,epochs=100, validation_data=data_test, callbacks=[callbacks])

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()